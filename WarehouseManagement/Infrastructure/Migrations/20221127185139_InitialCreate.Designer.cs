// <auto-generated />
using System;
using Infrastructure.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(EletricGoDbContext))]
    [Migration("20221127185139_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Delivery", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationWarehouseId")
                        .HasColumnType("text");

                    b.Property<int>("LoadingTime")
                        .HasColumnType("integer");

                    b.Property<double>("Mass")
                        .HasColumnType("double precision");

                    b.Property<int>("WithdrawingTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DestinationWarehouseId");

                    b.ToTable("Deliveries", "public");
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Warehouses", "public");
                });

            modelBuilder.Entity("Domain.Entities.Delivery", b =>
                {
                    b.HasOne("Domain.Entities.Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId");

                    b.OwnsOne("Domain.Entities.DeliveryCode", "Code", b1 =>
                        {
                            b1.Property<string>("DeliveryId")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("DeliveryId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Deliveries", "public");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryId");
                        });

                    b.Navigation("Code");

                    b.Navigation("DestinationWarehouse");
                });

            modelBuilder.Entity("Domain.Entities.Warehouse", b =>
                {
                    b.OwnsOne("Domain.Entities.WarehouseAddress", "Address", b1 =>
                        {
                            b1.Property<string>("WarehouseId")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.HasKey("WarehouseId");

                            b1.ToTable("Warehouses", "public");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseId");
                        });

                    b.OwnsOne("Domain.Entities.WarehouseCode", "Code", b1 =>
                        {
                            b1.Property<string>("WarehouseId")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("WarehouseId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Warehouses", "public");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseId");
                        });

                    b.OwnsOne("Domain.Entities.WarehouseCoordinates", "Coordinates", b1 =>
                        {
                            b1.Property<string>("WarehouseId")
                                .HasColumnType("text");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("WarehouseId");

                            b1.ToTable("Warehouses", "public");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseId");
                        });

                    b.OwnsOne("Domain.Entities.WarehouseDescription", "Description", b1 =>
                        {
                            b1.Property<string>("WarehouseId")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("WarehouseId");

                            b1.ToTable("Warehouses", "public");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Code");

                    b.Navigation("Coordinates");

                    b.Navigation("Description");
                });
#pragma warning restore 612, 618
        }
    }
}
